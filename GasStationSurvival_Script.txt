// This file is auto generated by ScriptLinker at 16:24:00 14/10/2024
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: Lozango com z
* description: Script for GasStationSurvival map. (By Sunda)
* mapmodes: 
*/
public static Random rnd=new Random();Events.PlayerDeathCallback m_playerDeathEvent=null;public void OnStartup(){m_playerDeathEvent=Events.PlayerDeathCallback.Start(OnPlayerDeath);WaveManager.ManualSetup(Game.SurvivalWave);EnemyManager.RefreshSpawnPoints();WaveManager.TryNextSession();}public void OnPlayerDeath(IPlayer player,PlayerDeathArgs args){if(!args.Killed)return;foreach(Enemy e in Wave.EnemiesList.Where(en=>en.ply==player)){EnemyManager.OnEnemyDeath(e,args);return;}WaveManager.GameOverCheck();}public static void Msg(string s){Game.ShowChatMessage("DEBUG: "+s);}public static void Msg(string s,string origin){Game.ShowChatMessage(origin+": "+s);}public static float GetDifference(float a,float b){return Math.Abs(a-b);}public class Enemy{public IPlayer ply;public EnemySettings Settings;}public static class EnemyManager{private static Vector2[]SpawnPoints;public static void RefreshSpawnPoints(){IObject[]objs=Game.GetObjects("ENEMYSPAWNPOINT");SpawnPoints=objs.Select(obj=>obj.GetWorldPosition()).ToArray();}public static Enemy SpawnEnemy(int score){Vector2 SpawnPoint=SpawnPoints[rnd.Next(0,SpawnPoints.Length)];EnemySettings EnemySet=GetEnemyTemplateByBaseScore(score);Msg(String.Concat("Spawning new enemy. Score: ",score.ToString()," / Set: ",EnemySet.Name),"WAVEMANAGER");Enemy newEnemy=new Enemy();newEnemy.Settings=EnemySet;newEnemy.ply=newEnemy.Settings.GetSpawn().CreatePlayer();newEnemy.ply.SetWorldPosition(SpawnPoint);newEnemy.ply.SetCameraSecondaryFocusMode(CameraFocusMode.Ignore);return newEnemy;}public static void OnEnemyDeath(Enemy enemy,PlayerDeathArgs args){if(enemy.Settings==null)return;Game.TotalScore+=enemy.Settings.BaseScore;Msg("New score: "+Game.TotalScore.ToString(),"ONENEMYDEATH");WaveManager.TryNextSession();WaveManager.GameOverCheck();}}public static EnemySettings GetEnemyTemplateByBaseScore(float baseScore){return EnemySettingsList.OrderBy(x=>GetDifference(x.BaseScore,baseScore)).First();}public static readonly List<EnemySettings>EnemySettingsList=new List<EnemySettings>(){new EnemySettings{}};public class EnemySettings{public string Name="Debug";public IObjectPlayerSpawnTrigger GetSpawn(){return(IObjectPlayerSpawnTrigger)Game.GetObject("PS-"+Name.ToUpper());}public int BaseScore=100;}public static class Wave{public static WaveSetting Settings=null;public static int CurrentSessionIndex=-1;public static List<Enemy>EnemiesList=new List<Enemy>();public static List<Enemy>AliveEnemiesList{get{return EnemiesList.Where(enemy=>!enemy.ply.IsDead).ToList();}}}public static partial class WaveManager{public static void ManualSetup(int WAVEINDEX){Msg("Setting wave","WAVEMANAGER");if(Wave.Settings!=null){Msg("Already started.","WAVEMANAGER");return;}Wave.Settings=WaveSettingsList[WAVEINDEX-1];}public static bool GameOverCheck(){if((AllEnemiesIsDead()&&IsFinalSession())||AllPlayersIsDead()){Msg("Ending wave","WAVEMANAGER");Game.SetGameOver();return true;}return false;}public static bool TryNextSession(){if(!AllEnemiesIsDead())return false;Wave.CurrentSessionIndex+=1;if(IsFinalSession()){Msg("All spawn session are already spawned","WAVEMANAGER");return false;}LoadCurrentSession();return true;}private static void LoadCurrentSession(){Msg("Spawning enemy session","WAVEMANAGER");int enemysToSpawn=CurrentSession().EnemyUnits;int scorePerEnemy=(int)(CurrentSession().EnemyDifficulty/enemysToSpawn);for(int i=0;i<enemysToSpawn;i++){Wave.EnemiesList.Add(EnemyManager.SpawnEnemy(scorePerEnemy));}}public static bool IsFinalSession(){if(Wave.CurrentSessionIndex==Wave.Settings.SessionsArray.Count)return true;return false;}public static bool AllEnemiesIsDead(){if(Wave.AliveEnemiesList.Count<1)return true;return false;}public static bool AllPlayersIsDead(){if(Game.GetPlayers().Where(x=>x.GetTeam()==PlayerTeam.Team1&&!x.IsDead).ToArray().Length<1)return true;return false;}public static WaveSetting.Session CurrentSession(){return Wave.Settings.SessionsArray[Wave.CurrentSessionIndex];}}public class WaveSetting{public class Session{public int EnemyUnits=0;public int EnemyDifficulty=0;public int BossDifficulty=0;}public List<Session>SessionsArray=new List<Session>{};}public static readonly WaveSetting[]WaveSettingsList={new WaveSetting(){SessionsArray={new WaveSetting.Session(){EnemyUnits=2,EnemyDifficulty=200,},new WaveSetting.Session(){EnemyUnits=4,EnemyDifficulty=500,},new WaveSetting.Session(){EnemyUnits=4,EnemyDifficulty=500,},}},};