// This file is auto generated by ScriptLinker at 14:08:04 17/10/2024
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: Lozango com z
* description: Script for GasStationSurvival map. (By Sunda)
* mapmodes: 
*/
public static Random rnd=new Random();Events.PlayerDeathCallback m_playerDeathEvent=null;public void OnStartup(){m_playerDeathEvent=Events.PlayerDeathCallback.Start(OnPlayerDeath);WaveManager.ManualSetup(Game.SurvivalWave);EnemyManager.RefreshSpawnPoints();WaveManager.TryNextSession();}public void OnPlayerDeath(IPlayer player,PlayerDeathArgs args){if(!args.Killed)return;foreach(Enemy e in Wave.EnemiesList.Where(en=>en.ply==player)){EnemyManager.OnEnemyDeath(e,args);return;}WaveManager.GameOverCheck();}public static void Msg(string s){Game.ShowChatMessage("DEBUG: "+s);}public static void Msg(string s,string origin){Game.ShowChatMessage(origin+": "+s);}public static float GetDifference(float a,float b){return Math.Abs(a-b);}public class Enemy{public IPlayer ply;public int score;public EnemySettings Settings;}public static class EnemyManager{private static Vector2[]SpawnPoints;public static void RefreshSpawnPoints(){IObject[]objs=Game.GetObjects("ENEMYSPAWNPOINT");SpawnPoints=objs.Select(obj=>obj.GetWorldPosition()).ToArray();}public static Enemy SpawnEnemy(int score){Vector2 SpawnPoint=SpawnPoints[rnd.Next(0,SpawnPoints.Length)];EnemySettings EnemySet=GetEnemyTemplateByBaseScore(score);Msg(String.Concat("Spawning new enemy. Score: ",score.ToString()," / Set: ",EnemySet.Name),"SPAWNENEMY");Enemy newEnemy=new Enemy();newEnemy.score=score;newEnemy.Settings=EnemySet;newEnemy.ply=newEnemy.Settings.GetSpawn().CreatePlayer();IPlayer ply=newEnemy.ply;PlayerModifiers newMod=ply.GetModifiers();newMod.MaxHealth=(int)(score/2);newMod.CurrentHealth=newMod.CurrentHealth;newMod.SizeModifier=Math.Min((score-EnemySet.BaseScore)/100,1.25f);ply.SetModifiers(newMod);IProfile profile=EnemySet.GetAltProfiles()[rnd.Next(EnemySet.GetAltProfiles().Count)];ply.SetProfile(profile);ply.SetWorldPosition(SpawnPoint);ply.SetCameraSecondaryFocusMode(CameraFocusMode.Ignore);ply.SetBotName(score.ToString());return newEnemy;}public static void OnEnemyDeath(Enemy enemy,PlayerDeathArgs args){if(enemy.Settings==null)return;Game.TotalScore+=enemy.score;Msg("New score: "+Game.TotalScore.ToString(),"ONENEMYDEATH");WaveManager.TryNextSession();WaveManager.GameOverCheck();}}public class EnemySettings{public static readonly List<EnemySettings>EnemySettingsList=new List<EnemySettings>(){new EnemySettings{altProfilesID={"DefaultMale","DefaultFemale"}}};private string name="Debug";private int baseScore=0;private List<string>altProfilesID=new List<string>();public string Name{get{return name;}}public int BaseScore{get{return baseScore;}}public List<IProfile>GetAltProfiles(){if(altProfilesID.Count<=0)return new List<IProfile>{new IProfile()};List<IObjectPlayerProfileInfo>altProfilesObj=new List<IObjectPlayerProfileInfo>();foreach(string profId in altProfilesID){foreach(IObject obj in Game.GetObjectsByCustomID("PP-"+profId)){altProfilesObj.Add((IObjectPlayerProfileInfo)obj);}}return altProfilesObj.Select(profObj=>profObj.GetProfile()).ToList();}public IObjectPlayerSpawnTrigger GetSpawn(){return(IObjectPlayerSpawnTrigger)Game.GetObject("PS-"+Name.ToUpper());}}public static EnemySettings GetEnemyTemplateByBaseScore(float baseScore){return EnemySettings.EnemySettingsList.OrderBy(x=>GetDifference(x.BaseScore,baseScore)).First();}public partial class WaveManager{public static int[]ShareScore(int enemyCount,int initScore,double scoreConcentration,int minScorePerIndividual){int minScore=20;int reservedScore=minScore*enemyCount;if(initScore<reservedScore){Msg("Error: Session has insufficient score","WAVEMANAGER");return null;}int score=initScore-reservedScore;double[]weights=new double[enemyCount];for(int i=0;i<enemyCount;i++){weights[i]=Math.Pow(i+1,scoreConcentration);}double weightsSum=weights.Sum();int[]finalScoreList=new int[enemyCount];for(int i=0;i<enemyCount;i++){finalScoreList[i]=(int)Math.Round((weights[i]/weightsSum)*score)+minScore;}return finalScoreList;}}public static class Wave{public static WaveSetting Settings;public static int CurrentSessionIndex=-1;public static List<Enemy>EnemiesList=new List<Enemy>();public static List<Enemy>AliveEnemiesList{get{return EnemiesList.Where(enemy=>!enemy.ply.IsDead).ToList();}}}public static partial class WaveManager{public static void ManualSetup(int WAVEINDEX){Msg("Setting wave","WAVEMANAGER");if(Wave.Settings!=null){Msg("Already started.","WAVEMANAGER");return;}Wave.Settings=WaveSettingsList[WAVEINDEX-1];}public static bool GameOverCheck(){if((AllEnemiesIsDead()&&IsFinalSession())||AllPlayersIsDead()){Msg("Ending wave","WAVEMANAGER");Game.SetGameOver();return true;}return false;}public static bool TryNextSession(){if(!AllEnemiesIsDead())return false;Wave.CurrentSessionIndex+=1;if(IsFinalSession()){Msg("All spawn session are already spawned","WAVEMANAGER");return false;}SpawnSessionEnemies();return true;}private static void SpawnSessionEnemies(){Msg("Spawning enemy session","WAVEMANAGER");int[]ScorePerEnemy=ShareScore(CurrentSession().EnemyUnits,CurrentSession().EnemyScore,CurrentSession().ScoreConcentration,100);for(int i=0;i<CurrentSession().EnemyUnits;i++){Wave.EnemiesList.Add(EnemyManager.SpawnEnemy(ScorePerEnemy[i]));}}public static bool IsFinalSession(){if(Wave.CurrentSessionIndex==Wave.Settings.SessionsArray.Count)return true;return false;}public static bool AllEnemiesIsDead(){if(Wave.AliveEnemiesList.Count<1)return true;return false;}public static bool AllPlayersIsDead(){if(Game.GetPlayers().Where(x=>x.GetTeam()==PlayerTeam.Team1&&!x.IsDead).ToArray().Length<1)return true;return false;}public static WaveSetting.Session CurrentSession(){return Wave.Settings.SessionsArray[Wave.CurrentSessionIndex];}}public class WaveSetting{public class Session{public int EnemyUnits=0;public int EnemyScore=0;public double ScoreConcentration=0;}public List<Session>SessionsArray=new List<Session>{};}public static readonly WaveSetting[]WaveSettingsList={new WaveSetting(){SessionsArray={new WaveSetting.Session(){EnemyUnits=3,EnemyScore=300,ScoreConcentration=0},new WaveSetting.Session(){EnemyUnits=5,EnemyScore=500,ScoreConcentration=0.5},new WaveSetting.Session(){EnemyUnits=5,EnemyScore=500,ScoreConcentration=1},}},};