// This file is auto generated by ScriptLinker at 19:35:15 09/11/2024
// Sauce: https://github.com/NearHuscarl/ScriptLinker

/*
* author: Lozango
* description: 
* mapmodes: 
*/
public static Random rnd=new Random();Events.PlayerDeathCallback m_playerDeathEvent=null;public void OnStartup(){m_playerDeathEvent=Events.PlayerDeathCallback.Start(OnPlayerDeath);WaveManager.ManualSetup(Game.SurvivalWave);EnemySpawn.RefreshSpawnPoints();WaveManager.TryNextSession();}public void OnPlayerDeath(IPlayer player,PlayerDeathArgs args){if(!args.Killed)return;foreach(Enemy e in Wave.EnemiesList.Where(en=>en.ply==player)){OnEnemyDeath(e,args);return;}WaveManager.GameOverCheck();}public static void MsgG(object s){Game.WriteToConsole("DEBUG: "+s.ToString());}public static void MsgG(object s,string origin){Game.WriteToConsole(origin+": "+s.ToString());}public static void Msg(object s){Game.ShowChatMessage("DEBUG: "+s.ToString());}public static void Msg(object s,string origin){Game.ShowChatMessage(origin+": "+s.ToString());}public static float GetDifference(float a,float b){return Math.Abs(a-b);}public static object DrawRandomObject(object[]items,int[]chances){int totalChances=0;foreach(int chance in chances){totalChances+=chance;}int rndDraw=rnd.Next(0,totalChances);int acumulador=0;foreach(int chance in chances){acumulador+=chance;if(rndDraw<acumulador){return items[Array.IndexOf(chances,chance)];}}Msg("Items length = "+items.Length.ToString());Msg("Chances length = "+chances.Length.ToString());throw new Exception("Cannot draw random object");}public class Enemy{public IPlayer ply;public int score;public EnemyConfig Settings;}public static void OnEnemyDeath(Enemy enemy,PlayerDeathArgs args){if(enemy.Settings==null)return;Game.TotalScore+=enemy.score;Msg("New score: "+Game.TotalScore.ToString(),"ONENEMYDEATH");WaveManager.TryNextSession();WaveManager.GameOverCheck();}public class EnemyConfig{public string Name="Debug";public int BaseScore=0;public List<string>profilesID=new List<string>();public List<IProfile>GetProfiles(){if(profilesID.Count<=0)return new List<IProfile>{new IProfile()};List<IObjectPlayerProfileInfo>altProfilesObj=new List<IObjectPlayerProfileInfo>();foreach(string profId in profilesID){foreach(IObject obj in Game.GetObjectsByCustomID("PP-"+profId)){altProfilesObj.Add((IObjectPlayerProfileInfo)obj);}}return altProfilesObj.Select(profObj=>profObj.GetProfile()).ToList();}public IObjectPlayerSpawnTrigger GetSpawn(){return(IObjectPlayerSpawnTrigger)Game.GetObject("SPAWNER");}public float meleePreference=1;public float handgunPreference=1;public float riflePreference=1;public static Dictionary<WeaponItem,int>specialWpns=new Dictionary<WeaponItem,int>();public Func<Enemy,object>OnSpawn=(Enemy ec)=>{return null;};}public static readonly List<EnemyConfig>EnemyConfigList=new List<EnemyConfig>(){new EnemyConfig{Name="ROOKIE",profilesID={"DefaultMale","DefaultFemale"},meleePreference=1f,handgunPreference=0.80f,riflePreference=0.50f,},new EnemyConfig{Name="PUNK",profilesID={"DefaultMale","DefaultFemale"},meleePreference=0.25f,handgunPreference=1.30f,riflePreference=1.30f,}};public static EnemyConfig getEnemyConfigByName(string name){foreach(EnemyConfig eC in EnemyConfigList){if(eC.Name==name.ToUpper())return eC;}throw new Exception("Tried to get a EnemyConfig that doesn't exist.");}public static EnemyConfig GetEnemyConfigByChance(float score){EnemySpawnChance enemySpawnChance=Wave.Settings.enemySpawnChance;List<EnemyConfig>enemyConfigs=enemySpawnChance.enemyConfigs;List<int>configsMinScore=enemySpawnChance.configsMinScore;List<int>configsChance=enemySpawnChance.configsChance;List<EnemyConfig>filteredEnemyConfigs=new List<EnemyConfig>();List<int>filteredConfigChances=new List<int>();for(int i=0;i<enemyConfigs.Count;i++){if(score>enemySpawnChance.configsMinScore[i]){filteredEnemyConfigs.Add(enemyConfigs[i]);filteredConfigChances.Add(configsChance[i]);}}if(filteredConfigChances.Count==0||filteredEnemyConfigs.Count==0)throw new Exception("Cannot get a valid EnemyConfig sort list");return(EnemyConfig)DrawRandomObject(filteredEnemyConfigs.ToArray(),filteredConfigChances.ToArray());}public class EnemyScore{public static int[]ShareScore(int enemyCount,int initScore,double scoreConcentration,int minScorePerIndividual){int minScore=20;int reservedScore=minScore*enemyCount;if(initScore<reservedScore){Msg("Error: Session has insufficient score","SHARESCORE");return null;}int score=initScore-reservedScore;double[]weights=new double[enemyCount];for(int i=0;i<enemyCount;i++){weights[i]=Math.Pow(i+1,scoreConcentration);}double weightsSum=weights.Sum();int[]finalScoreList=new int[enemyCount];for(int i=0;i<enemyCount;i++){finalScoreList[i]=(int)Math.Round((weights[i]/weightsSum)*score)+minScore;}return finalScoreList;}public static EnemyConfig GetEnemyTemplateByBaseScore(float baseScore){return EnemyConfigList.OrderBy(x=>GetDifference(x.BaseScore,baseScore)).First();}}public static class EnemySpawn{private static Vector2[]SpawnPoints;public static void RefreshSpawnPoints(){IObject[]objs=Game.GetObjects("ENEMYSPAWNPOINT");SpawnPoints=objs.Select(obj=>obj.GetWorldPosition()).ToArray();}public static Enemy SpawnEnemy(int score){Vector2 SpawnPoint=SpawnPoints[rnd.Next(0,SpawnPoints.Length)];EnemyConfig EnemySet=GetEnemyConfigByChance(score);Msg(String.Concat("Spawning new enemy. Score: ",score.ToString()," / Set: ",EnemySet.Name),"SPAWNENEMY");Enemy newEnemy=new Enemy();score-=EnemySet.BaseScore;newEnemy.Settings=EnemySet;newEnemy.score=score;newEnemy.ply=newEnemy.Settings.GetSpawn().CreatePlayer();IPlayer ply=newEnemy.ply;PlayerModifiers newMod=ply.GetModifiers();newMod.MaxHealth=(int)(score/2);newMod.CurrentHealth=newMod.MaxHealth;newMod.MeleeDamageDealtModifier=score/150f;newMod.MeleeForceModifier=score/100f;newMod.SizeModifier=Math.Min(Math.Max(100,score)/100,1.25f);ply.SetModifiers(newMod);int wpnScore=score;if(wpnScore<0)wpnScore=0;EnemyWeapon.WeaponSet wpnSet=EnemyWeapon.GetWeaponSet(wpnScore,EnemySet,rnd.Next(-10,10));ply.GiveWeaponItem(wpnSet.meleeWpn);ply.GiveWeaponItem(wpnSet.handgunWpn);ply.GiveWeaponItem(wpnSet.rifleWpn);IProfile profile=EnemySet.GetProfiles()[rnd.Next(EnemySet.GetProfiles().Count)];ply.SetProfile(profile);ply.SetWorldPosition(SpawnPoint);ply.SetCameraSecondaryFocusMode(CameraFocusMode.Ignore);ply.SetBotName(score.ToString()+" "+EnemySet.Name);ply.SetInputMode(PlayerInputMode.Disabled);Events.UpdateCallback.Start((float e)=>{ply.SetInputMode(PlayerInputMode.Enabled);},(uint)800,1);return newEnemy;}}public static class EnemyWeapon{public static Dictionary<WeaponItem,int>MeleeWpnCostDic=new Dictionary<WeaponItem,int>{{WeaponItem.NONE,50},{WeaponItem.HAMMER,70},{WeaponItem.PIPE,80},{WeaponItem.LEAD_PIPE,100},{WeaponItem.BAT,110},{WeaponItem.CHAIN,150},};public static Dictionary<WeaponItem,int>HandgunWpnCostDic=new Dictionary<WeaponItem,int>{{WeaponItem.NONE,50},{WeaponItem.PISTOL,60},{WeaponItem.PISTOL45,100},{WeaponItem.UZI,120},{WeaponItem.MAGNUM,200}};public static Dictionary<WeaponItem,int>RifleWpnCostDic=new Dictionary<WeaponItem,int>{{WeaponItem.NONE,100},{WeaponItem.SHOTGUN,200},{WeaponItem.TOMMYGUN,400},{WeaponItem.ASSAULT,400}};public class WeaponSet{public WeaponItem meleeWpn=WeaponItem.NONE;public WeaponItem handgunWpn=WeaponItem.NONE;public WeaponItem rifleWpn=WeaponItem.NONE;}public static WeaponSet GetWeaponSet(int score,EnemyConfig enemyConfig,int randomGap){int currentScore=score;WeaponSet weaponSet=new WeaponSet();float meleePreference=enemyConfig.meleePreference;float handgunPreference=enemyConfig.handgunPreference;float riflePreference=enemyConfig.riflePreference;KeyValuePair<WeaponItem,int>melee;KeyValuePair<WeaponItem,int>handgun;KeyValuePair<WeaponItem,int>rifle;Action buyRifle=()=>{rifle=RifleWpnCostDic.OrderBy(x=>GetDifference(x.Value,(currentScore*riflePreference)+randomGap)).First();weaponSet.rifleWpn=rifle.Key;if(weaponSet.rifleWpn!=WeaponItem.NONE)currentScore-=rifle.Value;};Action buyHandgun=()=>{handgun=HandgunWpnCostDic.OrderBy(x=>GetDifference(x.Value,(currentScore*handgunPreference)+randomGap)).First();weaponSet.handgunWpn=handgun.Key;if(weaponSet.handgunWpn!=WeaponItem.NONE)currentScore-=handgun.Value;};Action buyMelee=()=>{melee=MeleeWpnCostDic.OrderBy(x=>GetDifference(x.Value,(currentScore*meleePreference)+randomGap)).First();weaponSet.meleeWpn=melee.Key;if(weaponSet.meleeWpn!=WeaponItem.NONE)currentScore-=melee.Value;};var wpnPerPreference=new Dictionary<Action,float>{{buyRifle,enemyConfig.riflePreference},{buyHandgun,enemyConfig.handgunPreference},{buyMelee,enemyConfig.meleePreference}};var sortedBuy=wpnPerPreference.OrderByDescending(par=>par.Value).Select(par=>par.Key).ToList();foreach(Action act in sortedBuy){act();}return weaponSet;}}public static class Wave{public static WaveConfig Settings;public static int CurrentSessionIndex=-1;public static List<Enemy>EnemiesList=new List<Enemy>();public static List<Enemy>AliveEnemiesList{get{return EnemiesList.Where(enemy=>!enemy.ply.IsDead).ToList();}}}public static partial class WaveManager{public static void ManualSetup(int WAVEINDEX){Msg("Setting wave","WAVEMANAGER");if(Wave.Settings!=null){Msg("Already started.","WAVEMANAGER");return;}Wave.Settings=WaveConfigList[WAVEINDEX-1];}public static bool GameOverCheck(){if((AllEnemiesIsDead()&&IsFinalSession())||AllPlayersIsDead()){Msg("Ending wave","WAVEMANAGER");Game.SetGameOver();return true;}return false;}public static bool TryNextSession(){if(!AllEnemiesIsDead())return false;Wave.CurrentSessionIndex+=1;if(IsFinalSession()){Msg("All spawn session are already spawned","WAVEMANAGER");return false;}SpawnSessionEnemies();return true;}private static void SpawnSessionEnemies(){Msg("Spawning enemy session","WAVEMANAGER");int[]ScorePerEnemy=EnemyScore.ShareScore(CurrentSession().EnemyUnits,CurrentSession().ScorePerEnemy*CurrentSession().EnemyUnits,CurrentSession().ScoreConcentration,100);for(int i=0;i<CurrentSession().EnemyUnits;i++){int scr=ScorePerEnemy[i];Events.UpdateCallback.Start((float e)=>{Wave.EnemiesList.Add(EnemySpawn.SpawnEnemy(scr));},(uint)(600*(i+1)),1);}}public static bool IsFinalSession(){if(Wave.CurrentSessionIndex==Wave.Settings.SessionsArray.Count)return true;return false;}public static bool AllEnemiesIsDead(){if(Wave.AliveEnemiesList.Count<1)return true;return false;}public static bool AllPlayersIsDead(){if(Game.GetPlayers().Where(x=>x.GetTeam()==PlayerTeam.Team1&&!x.IsDead).ToArray().Length<1)return true;return false;}public static WaveConfig.Session CurrentSession(){return Wave.Settings.SessionsArray[Wave.CurrentSessionIndex];}}public class WaveConfig{public class Session{public int EnemyUnits=0;public int ScorePerEnemy=0;public double ScoreConcentration=0;}public List<Session>SessionsArray=new List<Session>{};public EnemySpawnChance enemySpawnChance;}public class EnemySpawnChance{public List<EnemyConfig>enemyConfigs=new List<EnemyConfig>{};public List<int>configsChance=new List<int>{};public List<int>configsMinScore=new List<int>{};public EnemySpawnChance(EnemyConfig[]enemyConfigs,int[]configsChance,int[]configsMinScore){this.enemyConfigs=enemyConfigs.ToList();this.configsChance=configsChance.ToList();this.configsMinScore=configsMinScore.ToList();}}public static EnemySpawnChance SpawnChance0{get{return new EnemySpawnChance(new EnemyConfig[]{getEnemyConfigByName("ROOKIE"),getEnemyConfigByName("PUNK")},new int[]{1,1},new int[]{0,50});}}public static readonly WaveConfig[]WaveConfigList={new WaveConfig(){SessionsArray={new WaveConfig.Session(){EnemyUnits=4,ScorePerEnemy=50,ScoreConcentration=1.5},new WaveConfig.Session(){EnemyUnits=4,ScorePerEnemy=80,ScoreConcentration=1.5},new WaveConfig.Session(){EnemyUnits=4,ScorePerEnemy=100,ScoreConcentration=1.5},},enemySpawnChance=SpawnChance0,},};